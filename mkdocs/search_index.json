{
    "docs": [
        {
            "location": "/", 
            "text": "sciebo@Learnweb\n\n\nDiese Website dokumentiert das Projektseminar \nsciebo@Learnweb\n, das im Wintersemester 2016/17 an der \nWestf\u00e4lischen Wilhelms-Universit\u00e4t M\u00fcnster\n stattgefunden hat.\n\n\nGegenstand des Projektseminars war die Integration der Systeme \nsciebo\n und \nLearnweb\n. Sciebo ist ein Cloud-Dienst, der gemeinsam von 26 Hochschulen und Forschungseinrichtungen in NRW angeboten wird. Als Grundlage dient die Open-Source-L\u00f6sung \nownCloud\n. Das Learnweb ist ein auf der Open-Source-L\u00f6sung \nMoodle\n basierendes E-Learning System der Westf\u00e4lischen Wilhelms-Universit\u00e4t M\u00fcnster.\n\n\nEine m\u00f6gliche L\u00f6sung sollte dabei m\u00f6glichst allgemein einsetzbar sein, da die Kombination von Moodle und ownCloud an zahlreichen Universit\u00e4ten genutzt wird.\n\n\nUser Stories\n\n\nAls Integrationsszenarien der Systeme wurden verschiedene User Stories entwickelt. Als Integrationsrichtung konzentrierte man sich auf die Richtung Learnweb \n sciebo.\n\n\nAuthentifizierung und Autorisierung\n\n\nGrundlegend f\u00fcr die Integration beider Systeme ist die Authentifizierung und Autorisierung. Unter den g\u00e4ngigen Verfahren, die untersucht wurden, befinden sich:\n\n\n\n\nOAuth 2.0\n\n\nJSON Web Tokens\n\n\nFederated Single Sign-on mit beispielsweise \nShibboleth\n\n\n\n\nF\u00fcr das Projekt wurde das OAuth 2.0 Verfahren ausgew\u00e4hlt, da mit ihm ein standardisiertes Verfahren zur tokenbasierten Authentifizierung und Autorisierung vorliegt, das sich gut in bestehende Applikationen auf Basis vieler verschiedener Programmiersprachen einf\u00fcgen l\u00e4sst und damit keine weiteren Anforderungen an die Infrastruktur stellt.\n\n\nOAuth 2.0\n\n\nDer allgemeine OAuth 2.0 Protokollablauf ist in der nachfolgenden Abbildung dargestellt.\n\n\n\n\nZun\u00e4chst muss sich der Client (Learnweb), der im Namen des Resource Owners (sciebo Nutzer) auf eine gesch\u00fctzte Ressource auf dem Resource Server (sciebo) zugreifen m\u00f6chte, bei dem Authorization Server (sciebo) registrieren. Danach werden nach dem Protokoll folgende Schritte durchlaufen:\n\n\n\n\nAuthorization Request:\n\n\nAuthorization Response\n\n\nAccess Token Request\n\n\nAccess Token Response\n\n\nAnfrage mittels Access Token\n\n\nZugriff auf gesch\u00fctzte Ressourcen\n\n\n\n\n\n  \nTODO:\n Beschreibung der Schritte einf\u00fcgen.\n\n\n\n\nKomponenten\n\n\nownCloud\n\n\nMoodle\n\n\nZusammenspiel", 
            "title": "Home"
        }, 
        {
            "location": "/#sciebolearnweb", 
            "text": "Diese Website dokumentiert das Projektseminar  sciebo@Learnweb , das im Wintersemester 2016/17 an der  Westf\u00e4lischen Wilhelms-Universit\u00e4t M\u00fcnster  stattgefunden hat.  Gegenstand des Projektseminars war die Integration der Systeme  sciebo  und  Learnweb . Sciebo ist ein Cloud-Dienst, der gemeinsam von 26 Hochschulen und Forschungseinrichtungen in NRW angeboten wird. Als Grundlage dient die Open-Source-L\u00f6sung  ownCloud . Das Learnweb ist ein auf der Open-Source-L\u00f6sung  Moodle  basierendes E-Learning System der Westf\u00e4lischen Wilhelms-Universit\u00e4t M\u00fcnster.  Eine m\u00f6gliche L\u00f6sung sollte dabei m\u00f6glichst allgemein einsetzbar sein, da die Kombination von Moodle und ownCloud an zahlreichen Universit\u00e4ten genutzt wird.", 
            "title": "sciebo@Learnweb"
        }, 
        {
            "location": "/#user-stories", 
            "text": "Als Integrationsszenarien der Systeme wurden verschiedene User Stories entwickelt. Als Integrationsrichtung konzentrierte man sich auf die Richtung Learnweb   sciebo.", 
            "title": "User Stories"
        }, 
        {
            "location": "/#authentifizierung-und-autorisierung", 
            "text": "Grundlegend f\u00fcr die Integration beider Systeme ist die Authentifizierung und Autorisierung. Unter den g\u00e4ngigen Verfahren, die untersucht wurden, befinden sich:   OAuth 2.0  JSON Web Tokens  Federated Single Sign-on mit beispielsweise  Shibboleth   F\u00fcr das Projekt wurde das OAuth 2.0 Verfahren ausgew\u00e4hlt, da mit ihm ein standardisiertes Verfahren zur tokenbasierten Authentifizierung und Autorisierung vorliegt, das sich gut in bestehende Applikationen auf Basis vieler verschiedener Programmiersprachen einf\u00fcgen l\u00e4sst und damit keine weiteren Anforderungen an die Infrastruktur stellt.", 
            "title": "Authentifizierung und Autorisierung"
        }, 
        {
            "location": "/#oauth-20", 
            "text": "Der allgemeine OAuth 2.0 Protokollablauf ist in der nachfolgenden Abbildung dargestellt.   Zun\u00e4chst muss sich der Client (Learnweb), der im Namen des Resource Owners (sciebo Nutzer) auf eine gesch\u00fctzte Ressource auf dem Resource Server (sciebo) zugreifen m\u00f6chte, bei dem Authorization Server (sciebo) registrieren. Danach werden nach dem Protokoll folgende Schritte durchlaufen:   Authorization Request:  Authorization Response  Access Token Request  Access Token Response  Anfrage mittels Access Token  Zugriff auf gesch\u00fctzte Ressourcen   \n   TODO:  Beschreibung der Schritte einf\u00fcgen.", 
            "title": "OAuth 2.0"
        }, 
        {
            "location": "/#komponenten", 
            "text": "", 
            "title": "Komponenten"
        }, 
        {
            "location": "/#owncloud", 
            "text": "", 
            "title": "ownCloud"
        }, 
        {
            "location": "/#moodle", 
            "text": "", 
            "title": "Moodle"
        }, 
        {
            "location": "/#zusammenspiel", 
            "text": "", 
            "title": "Zusammenspiel"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/", 
            "text": "Technische Umsetzung\n\n\nDa man m\u00f6glichst keine neue Schnittstelle implementieren wollte, war es das Ziel, die bestehende WebDAV Schnittstelle um OAuth 2.0 zu erweitern. Die WebDAV Schnittstelle ist als \nownCloud App\n realisiert worden und nutzt die \nsabre/dav\n Bibliothek. Auf der anderen Seite musste das OAuth 2.0 Protokoll mit seinen Schnittstellen bereitgestellt werden, um die Authentifizierung in der WebDAV App um OAuth 2.0 zu erweitern zu k\u00f6nnen. Daf\u00fcr wurde eine weitere ownCloud App implementiert.\n\n\nImplementierung der \noauth2\n App\n\n\nIn der App sollte der h\u00e4ufig f\u00fcr Webapplikationen eingesetzte \nAuthorization Code Flow\n implementiert werden. Dazu mussten folgende User Stories umgesetzt werden:\n\n\n\n\nClientregistrierung:\n Als ownCloud-Administrator m\u00f6chte ich Clients in den Administrator-Einstellungen hinzuf\u00fcgen und l\u00f6schen k\u00f6nnen, um die Kontrolle \u00fcber erlaubte Clients zu haben.\n\n\nAuthorization URL:\n Als Client-Entwickler m\u00f6chte ich eine Authorization URL zur Verf\u00fcgung haben, um Authorization Codes anfordern zu k\u00f6nnen.\n\n\nAccess Token URL:\n Als Client-Entwickler m\u00f6chte ich eine Access Token URL zur Verf\u00fcgung haben, um Access Tokens anfordern zu k\u00f6nnen.\n\n\nVerwaltung autorisierter Applikationen\n: Als ownCloud-Nutzer m\u00f6chte ich in den pers\u00f6nlichen Einstellungen autorisierte Applikationen verwalten k\u00f6nnen, um einen \u00dcberblick zu haben und Autorisierungen widerrufen zu k\u00f6nnen.\n\n\n\n\nDatenmodell\n\n\nZun\u00e4chst musste ein Datenmodell zur Speicherung der ben\u00f6tigten Daten aufgestellt werden. Gem\u00e4\u00df dem Authorization Code Flow wurden folgende Entit\u00e4ten mit Attributen definiert:\n\n\n\n\nclient\n:\n Die Applikation, die f\u00fcr den Zugriff auf die WebDAV Schnittstelle autorisiert werden soll.\n\n\nidentifier\n: Zeichenkette, die einen Client eindeutig identifiziert.\n\n\nsecret\n: Zeichenkette, mit der ein Client sich beim Anfordern eines Access Tokens authentifizieren kann.\n\n\nredirect_uri\n: URI, an die nach erfolgter Autorisierung des Nutzers weitergeleitet wird.\n\n\n\n\n\n\nauthorization_code\n:\n Ein \nAuthorization Grant\n, mit dem der Client die Autorisierung des Nutzers darlegen und somit ein Access Token anfordern kann.\n\n\ncode\n: Zeichenkette, die als Authorization Code dient.\n\n\nclient_id\n: Client Identifier des Clients, f\u00fcr den der Authorization Code ausgegeben wird.\n\n\nuser_id\n: User ID des ownCloud-Nutzers, der den Client autorisiert hat.\n\n\nexpires\n: Zeitpunkt, zu dem der Authorization Code ung\u00fcltig wird (optional).\n\n\n\n\n\n\naccess_token\n:\n Eine Zeichenkette, die den Zugriff auf die WebDAV Schnittstelle erlaubt.\n\n\ncode\n: Zeichenkette, die als Access Token dient.\n\n\nclient_id\n: Client Identifier des Clients, f\u00fcr den der Access Token ausgegeben wird.\n\n\nuser_id\n: User ID des ownCloud-Nutzers, der den Client autorisiert hat.\n\n\nexpires\n: Zeitpunkt, zu dem der Access Token ung\u00fcltig wird (optional).\n\n\n\n\n\n\nrefresh_token\n:\n Eine Zeichenkette, mit der ein abgelaufener Access Token gegen einen neuen ausgetauscht werden kann.\n\n\ncode\n: Zeichenkette, die als Refresh Token dient.\n\n\nclient_id\n: Client Identifier des Clients, f\u00fcr den der Access Token ausgegeben wird.\n\n\nuser_id\n: User ID des ownCloud-Nutzers, der den Client autorisiert hat.\n\n\nexpires\n: Zeitpunkt, zu dem der Refresh Token ung\u00fcltig wird (optional).\n\n\n\n\n\n\n\n\nFolgendes Entity-Relationship-Modell fasst das Datenmodell nochmal grafisch zusammen.\n\n\n\n  \nTODO:\n ERM einf\u00fcgen.\n\n\n\n\nMapper und Entities\n\n\nF\u00fcr den Datenbank-Zugriff im PHP-Code ist es in ownCloud m\u00f6glich, \nMapper\n und \nEntities\n zu schreiben. Dadurch werden Tupel in einer Datenbank-Tabelle automatisch in ein Objekt umgewandelt.\n\n\nFolgendes Codebeispiel zeigt am Beispiel des Entitys \nClient\n, wie eine PHP-Klasse dazu aussehen muss.\n\n\n?php\nnamespace OCA\\OAuth2\\Db;\n\nuse OCP\\AppFramework\\Db\\Entity;\n\n/**\n * Class Client\n *\n * @method string getIdentifier()\n * @method void setIdentifier(string $identifier)\n * @method string getSecret()\n * @method void setSecret(string $secret)\n * @method string getRedirectUri()\n * @method void setRedirectUri(string $redirectUri)\n * @method string getName()\n * @method void setName(string $name)\n */\nclass Client extends Entity {\n\n    protected $identifier;\n    protected $secret;\n    protected $redirectUri;\n    protected $name;\n\n    public function __construct() {\n        $this-\naddType('id', 'int');\n        $this-\naddType('identifier', 'string');\n        $this-\naddType('secret', 'string');\n        $this-\naddType('redirect_uri', 'string');\n        $this-\naddType('name', 'string');\n    }\n\n}\n\n\n\n\nWichtig ist, dass die Klasse von \nEntity\n erbt und sowohl der Klassenname als auch die Attribute mit denen der Tabelle \u00fcbereinstimmen. Pascal bzw. Camel case im PHP-Code wird automatisch zu Snake case f\u00fcr die Datenbank umgewandelt. Getter und Setter werden ebenfalls automatisch generiert. Die PHPDoc Kommentare dienen lediglich dazu, in der Entwicklungsumgebung eine automatische Vervollst\u00e4ndigung zu haben. Die Angabe von \nTypen\n im Konstruktor dienen dazu, beim Lesen aus der Datenbank die richtige Umwandlung zu erhalten.\n\n\nDas folgende Codebeispiel zeigt einen Ausschnitt aus dem zur \nClient\n Entity geh\u00f6renden Mapper.\n\n\n?php\nnamespace OCA\\OAuth2\\Db;\n\nuse InvalidArgumentException;\nuse OCP\\AppFramework\\Db\\Entity;\nuse OCP\\IDb;\nuse OCP\\AppFramework\\Db\\Mapper;\n\nclass ClientMapper extends Mapper {\n\n    /**\n     * ClientMapper constructor.\n     *\n     * @param IDb $db Database Connection.\n     */\n    public function __construct(IDb $db) {\n        parent::__construct($db, 'oauth2_clients');\n    }\n\n    /**\n     * Selects a client by its ID.\n     *\n     * @param int $id The client's ID.\n     *\n     * @return Entity The client entity.\n     *\n     * @throws \\OCP\\AppFramework\\Db\\DoesNotExistException if not found.\n     * @throws \\OCP\\AppFramework\\Db\\MultipleObjectsReturnedException if more than one result.\n     */\n    public function find($id) {\n        if (!is_int($id)) {\n            throw new InvalidArgumentException('id must not be null');\n        }\n\n        $sql = 'SELECT * FROM `' . $this-\ntableName . '` WHERE `id` = ?';\n        return $this-\nfindEntity($sql, array($id), null, null);\n    }\n\n    /**\n     * Selects clients by the given user ID.\n     *\n     * @param string $userId The user ID.\n     *\n     * @return array The client entities.\n     */\n    public function findByUser($userId) {\n        if (!is_string($userId)) {\n            throw new InvalidArgumentException('userId must not be null');\n        }\n\n        $sql = 'SELECT * FROM `' . $this-\ntableName . '` '\n            . 'WHERE `id` IN ( '\n                . 'SELECT `client_id` FROM `oc_oauth2_authorization_codes` WHERE `user_id` = ? '\n                . 'UNION '\n                . 'SELECT `client_id` FROM `oc_oauth2_access_tokens` WHERE `user_id` = ? '\n            .')';\n        return $this-\nfindEntities($sql, array($userId, $userId), null, null);\n    }\n\n}\n\n\n\n\nBeim Mapper ist es wichtig, dass die Klasse von \nMapper\n erbt und eine Entity-Klasse zu ihm existiert. Dazu wird das Wort vor \u201eMapper\u201c als Entityname verwendet. Im Konstruktur wird der Tabellenname angegeben. Die beiden Funktionen \nfind\n und \nfindByUser\n demonstrieren \nSELECT\n-Anweisungen. Dazu wird die SQL-Anweisungen zusammen mit ben\u00f6tigten Parametern an \nfindEntity\n bzw. \nfindEntities\n \u00fcbergeben, abh\u00e4ngig davon, ob mehrere Entities im Ergebnis enthalten sein sollten. Funktionen zum l\u00f6schen, einf\u00fcgen und updaten werden von der Oberklasse bereits implementiert und mussten nicht angepasst werden.\n\n\nSchnittstellen und Routes\n\n\nUm in einer ownCloud App Schnittstellen anzubieten, m\u00fcssen \nRoutes\n registriert werden. Zur Umsetzung der erw\u00e4hnten User Stories waren folgende Routes notwendig:\n\n\n\n\n\n\n\n\nMethode\n\n\nEndpunkt\n\n\nBeschreibung\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nauthorize\n\n\nEndpunkt, zu dem der Client den Nutzer weiterleitet, um die Autorisierung anzufragen (Authorization URL).\n\n\n\n\n\n\nPOST\n\n\nauthorize\n\n\nEndpunkt, der aufgerufen wird, sobald der Nutzer den Client autorisiert hat.\n\n\n\n\n\n\nPOST\n\n\napi/v1/token\n\n\nEndpunkt, an dem ein Access Token angefordert wird (Access Token URL).\n\n\n\n\n\n\nPOST\n\n\nclients\n\n\nEndpunkt, durch den der Administrator einen Client hinzuf\u00fcgen kann.\n\n\n\n\n\n\nPOST\n\n\nclients/{id}/delete\n\n\nEndpunkt, durch den der Administrator den Client mit der ID \nid\n l\u00f6schen kann.\n\n\n\n\n\n\nPOST\n\n\nclients/{id}/revoke\n\n\nEndpunkt, durch den der Nutzer die Autorisierung des Clients mit der ID \nid\n widerrufen kann.\n\n\n\n\n\n\n\n\nRegistriert werden die Routes in der Datei \nroutes.php\n, indem ein Array mit den Routes zur\u00fcckgegeben wird. Nachfolgendes Codebeispiel zeigt einige der obigen Routes:\n\n\n?php\nreturn [\n    'routes' =\n [\n        ['name' =\n 'page#authorize', 'url' =\n '/authorize', 'verb' =\n 'GET'],\n        ['name' =\n 'o_auth_api#generate_token', 'url' =\n '/api/v1/token', 'verb' =\n 'POST'],\n        ['name' =\n 'settings#deleteClient', 'url' =\n '/clients/{id}/delete', 'verb' =\n 'POST']\n    ]\n];\n\n\n\n\n\nDurch \nname\n wird f\u00fcr jede Route der Name des dazugeh\u00f6rigen \nControllers\n sowie die aufzurufende Funktion angegeben. Vor dem \n#\n-Zeichen steht der Controllername in Snake case und hinter dem \n#\n-Zeichen steht der Funktionsname (ebenfalls in Snake case). Mithilfe von \nurl\n wird der Endpunkt festgelegt und \nverb\n definiert die HTTP-Methode.\n\n\nController\n\n\nWenn an einem Endpunkt eine HTTP-Anfrage ankommt, so wird der in den Routes definierte \nController\n aufgerufen. Wichtig ist hierbei, dass von der Klasse \nController\n oder einer Unterklasse wie \nApiController\n geerbt wird.\n\n\nF\u00fcr den Controller notwendige Parameter wie \nMapper\n k\u00f6nnen im Konstruktor als Parameter angegeben und so durch \nDependency Injection\n erhalten werden. Nachfolgendes Codebeispiel zeigt den Konstruktor vom \nPageController\n.\n\n\n/**\n * PageController constructor.\n * \n * @param string $AppName The name of the app.\n * @param IRequest $request The request.\n * @param ClientMapper $clientMapper The client mapper.\n * @param AuthorizationCodeMapper $authorizationCodeMapper The authorization code mapper.\n * @param string $UserId The user ID.\n */\npublic function __construct($AppName, IRequest $request, ClientMapper $clientMapper,\n    AuthorizationCodeMapper $authorizationCodeMapper, $UserId) {\n    parent::__construct($AppName, $request);\n\n    $this-\nclientMapper = $clientMapper;\n    $this-\nauthorizationCodeMapper = $authorizationCodeMapper;\n    $this-\nuserId = $UserId;\n}\n\n\n\n\nDie hier notwendigen Parameter sind der Name der App, eine \nClientMapper\n Instanz, eine \nAuthorizationCodeMapper\n Instanz und die ID des Nutzers, um bei der Autorisierung des Clients speichern zu k\u00f6nnen, welcher Nutzers dies veranlasst hat.\n\n\nDie mit den Routes verkn\u00fcpften Funktionen k\u00f6nnen zur Zugriffskontrolle mit \nPHPDoc Annotationen\n versehen werden. Folgendes Codebeispiel zeigt die Annotationen f\u00fcr die Funktion \ngenerateToken\n im \nOAuthApiController\n.\n\n\n/**\n * Implements the OAuth 2.0 Access Token Response.\n *\n * @param string $code The authorization code.\n * @return JSONResponse The Access Token or an empty JSON Object.\n *\n * @NoAdminRequired\n * @NoCSRFRequired\n * @PublicPage\n * @CORS\n */\npublic function generateToken($code) { }\n\n\n\n\nDie Annotationen haben dabei folgende Bedeutungen.\n\n\n\n\n\n\n\n\nAnnotation\n\n\nBedeutung\n\n\n\n\n\n\n\n\n\n\n@NoAdminRequired\n\n\nAufruf auch von normalen Nutzern m\u00f6glich.\n\n\n\n\n\n\n@NoCSRFRequired\n\n\nZeigt an, dass die \u00dcberpr\u00fcfung des CSRF Tokens nicht gewollt ist.\n\n\n\n\n\n\n@PublicPage\n\n\nZugriff auch ohne Login m\u00f6glich.\n\n\n\n\n\n\n@CORS\n\n\nAufruf der API durch andere Web Applikationen von au\u00dfen m\u00f6glich.\n\n\n\n\n\n\n\n\nIn den Controller-Funktionen k\u00f6nnen verschiedene Inhalte zur\u00fcckgegeben werden. Hier genutzte R\u00fcckgabetypen sind in der folgenden Tabelle zusammengefasst.\n\n\n\n\n\n\n\n\nTyp\n\n\nBeschreibung\n\n\n\n\n\n\n\n\n\n\nTemplateResponse\n\n\nZur R\u00fcckgabe eines Templates, das dem Nutzer angezeigt werden soll.\n\n\n\n\n\n\nRedirectResponse\n\n\nZur Weiterleitung des Nutzers an eine andere URL.\n\n\n\n\n\n\nJSONResponse\n\n\nZur R\u00fcckgabe eines JSON Strings.\n\n\n\n\n\n\n\n\nEin Beispiel f\u00fcr die R\u00fcckgabetypen \nTemplateResponse\n und \nRedirectResponse\n gibt die Funktion \nauthorize\n im \nPageController\n, die im folgenden Codebeispiel zu sehen ist.\n\n\n/**\n * Shows a view for the user to authorize a client.\n *\n * @param string $response_type The expected response type.\n * @param string $client_id The client identifier.\n * @param string $redirect_uri The redirect URI.\n * @param string $state The state.\n * @param string $scope The scope.\n *\n * @return TemplateResponse|RedirectResponse The authorize view or a\n * redirection to the ownCloud main page.\n *\n * @NoAdminRequired\n * @NoCSRFRequired\n */\npublic function authorize($response_type, $client_id, $redirect_uri, $state = null, $scope = null) {\n    if (!is_string($response_type) || !is_string($client_id)\n        || !is_string($redirect_uri) || (isset($state) \n !is_string($state))\n        || (isset($scope) \n !is_string($scope))) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n\n    try {\n        /** @var Client $client */\n        $client = $this-\nclientMapper-\nfindByIdentifier($client_id);\n    } catch (DoesNotExistException $exception) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n\n    if (strcmp($client-\ngetRedirectUri(), urldecode($redirect_uri)) !== 0) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n    if (strcmp($response_type, 'code') !== 0) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n\n    return new TemplateResponse('oauth2', 'authorize', ['client_name' =\n $client-\ngetName()]);\n}\n\n\n\n\nHier werden zun\u00e4chst die Parameter auf G\u00fcltigkeit \u00fcberpr\u00fcft. Sollten die Parameter nicht g\u00fcltig sein (beispielsweise deshalb, weil der angegebene Client nicht existiert oder dessen Redirect URI falsch angegeben wurde) wird mit einem \nRedirectResponse\n auf die ownCloud Startseite umgeleitet. Andernfalls wird ein \nTemplateResponse\n f\u00fcr das Template \nauthorize\n zur\u00fcckgegeben. F\u00fcr das Rendern des Templates k\u00f6nnen Parameter wie hier \nclient_name\n f\u00fcr den Namen des Clients \u00fcbergeben werden.\n\n\nDer R\u00fcckgabetyp \nJSONResponse\n wird f\u00fcr die R\u00fcckgabe des Access Tokens in der Funktion \ngenerateToken\n im \nOAuthApiController\n genutzt, wie nachfolgendes Codebeispiel zeigt. Zudem ist das Zusammenspiel mit Entities und Mappern zu sehen.\n\n\n/**\n * Implements the OAuth 2.0 Access Token Response.\n *\n * @param string $code The authorization code.\n * @return JSONResponse The Access Token or an empty JSON Object.\n *\n * @NoAdminRequired\n * @NoCSRFRequired\n * @PublicPage\n * @CORS\n */\npublic function generateToken($code) {\n    if (is_null($code) || is_null($_SERVER['PHP_AUTH_USER'])\n        || is_null($_SERVER['PHP_AUTH_PW'])) {\n        return new JSONResponse(['message' =\n 'Missing credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    try {\n        /** @var Client $client */\n        $client = $this-\nclientMapper-\nfindByIdentifier($_SERVER['PHP_AUTH_USER']);\n    } catch (DoesNotExistException $exception) {\n        return new JSONResponse(['message' =\n 'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    if (strcmp($client-\ngetSecret(), $_SERVER['PHP_AUTH_PW']) !== 0) {\n        return new JSONResponse(['message' =\n 'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    try {\n        /** @var AuthorizationCode $authorizationCode */\n        $authorizationCode = $this-\nauthorizationCodeMapper-\nfindByCode($code);\n    } catch (DoesNotExistException $exception) {\n        return new JSONResponse(['message' =\n 'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    if (strcmp($authorizationCode-\ngetClientId(), $client-\ngetId()) !== 0) {\n        return new JSONResponse(['message' =\n 'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    $token = Utilities::generateRandom();\n    $userId = $authorizationCode-\ngetUserId();\n    $accessToken = new AccessToken();\n    $accessToken-\nsetToken($token);\n    $accessToken-\nsetClientId($authorizationCode-\ngetClientId());\n    $accessToken-\nsetUserId($userId);\n    $this-\naccessTokenMapper-\ninsert($accessToken);\n\n    $this-\nauthorizationCodeMapper-\ndelete($authorizationCode);\n\n    return new JSONResponse(\n        [\n            'access_token' =\n $token,\n            'token_type' =\n 'Bearer',\n            'user_id' =\n $userId\n        ]\n    );\n}\n\n\n\n\nNach erfolgreicher \u00dcberpr\u00fcfung des Authorization Codes und der Angaben zur Client Authentication im Authorization Header wird eine neuer Access Token erstellt und in der Datenbank gespeichert. Der verwendete Authorization Code wird zudem gel\u00f6scht. Im JSON Response wird dann der Access Token, der Token Typ und die ID des Nutzers zur\u00fcckgegeben. Nachfolgend ist ein Beispiel dazu angegeben.\n\n\n{\n    \naccess_token\n : \n1vtnuo1NkIsbndAjVnhl7y0wJha59JyaAiFIVQDvcBY2uvKmj5EPBEhss0pauzdQ\n,\n    \ntoken_type\n : \nBearer\n,\n    \nuser_id\n : \nadmin\n\n}\n\n\n\n\nF\u00fcr die Token-Generierung wurde die Hilfsklasse \nUtilities\n mit der statischen Funktion \ngenerateRandom\n geschrieben, die mithilfe einer ownCloud-internen Funktion 64-stellige Zeichenketten erzeugt. Folgendes Codebeispiel zeigt diese Klasse.\n\n\n?php\nnamespace OCA\\OAuth2;\n\nclass Utilities {\n\n    /**\n     * Generates a random string with 64 characters.\n     *\n     * @return string The random string.\n     */\n    public static function generateRandom() {\n        return \\OC::$server-\ngetSecureRandom()-\ngenerate(64,\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');\n    }\n\n}\n\n\n\n\nZusammenfassend werden im folgenden UML-Klassendiagramm die Controller mit ihren Beziehungen zu den Entities und Mappern dargestellt.\n\n\n\n  \nTODO:\n Klassendiagramm einf\u00fcgen.\n\n\n\n\nTemplates\n\n\nProtokollablauf\n\n\nTests\n\n\nContinuous Integration\n\n\nAnpassung der \ndav\n App\n\n\nAuthentication Backend\n\n\nTests", 
            "title": "Technische Umsetzung"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#technische-umsetzung", 
            "text": "Da man m\u00f6glichst keine neue Schnittstelle implementieren wollte, war es das Ziel, die bestehende WebDAV Schnittstelle um OAuth 2.0 zu erweitern. Die WebDAV Schnittstelle ist als  ownCloud App  realisiert worden und nutzt die  sabre/dav  Bibliothek. Auf der anderen Seite musste das OAuth 2.0 Protokoll mit seinen Schnittstellen bereitgestellt werden, um die Authentifizierung in der WebDAV App um OAuth 2.0 zu erweitern zu k\u00f6nnen. Daf\u00fcr wurde eine weitere ownCloud App implementiert.", 
            "title": "Technische Umsetzung"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#implementierung-der-oauth2-app", 
            "text": "In der App sollte der h\u00e4ufig f\u00fcr Webapplikationen eingesetzte  Authorization Code Flow  implementiert werden. Dazu mussten folgende User Stories umgesetzt werden:   Clientregistrierung:  Als ownCloud-Administrator m\u00f6chte ich Clients in den Administrator-Einstellungen hinzuf\u00fcgen und l\u00f6schen k\u00f6nnen, um die Kontrolle \u00fcber erlaubte Clients zu haben.  Authorization URL:  Als Client-Entwickler m\u00f6chte ich eine Authorization URL zur Verf\u00fcgung haben, um Authorization Codes anfordern zu k\u00f6nnen.  Access Token URL:  Als Client-Entwickler m\u00f6chte ich eine Access Token URL zur Verf\u00fcgung haben, um Access Tokens anfordern zu k\u00f6nnen.  Verwaltung autorisierter Applikationen : Als ownCloud-Nutzer m\u00f6chte ich in den pers\u00f6nlichen Einstellungen autorisierte Applikationen verwalten k\u00f6nnen, um einen \u00dcberblick zu haben und Autorisierungen widerrufen zu k\u00f6nnen.", 
            "title": "Implementierung der oauth2 App"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#datenmodell", 
            "text": "Zun\u00e4chst musste ein Datenmodell zur Speicherung der ben\u00f6tigten Daten aufgestellt werden. Gem\u00e4\u00df dem Authorization Code Flow wurden folgende Entit\u00e4ten mit Attributen definiert:   client :  Die Applikation, die f\u00fcr den Zugriff auf die WebDAV Schnittstelle autorisiert werden soll.  identifier : Zeichenkette, die einen Client eindeutig identifiziert.  secret : Zeichenkette, mit der ein Client sich beim Anfordern eines Access Tokens authentifizieren kann.  redirect_uri : URI, an die nach erfolgter Autorisierung des Nutzers weitergeleitet wird.    authorization_code :  Ein  Authorization Grant , mit dem der Client die Autorisierung des Nutzers darlegen und somit ein Access Token anfordern kann.  code : Zeichenkette, die als Authorization Code dient.  client_id : Client Identifier des Clients, f\u00fcr den der Authorization Code ausgegeben wird.  user_id : User ID des ownCloud-Nutzers, der den Client autorisiert hat.  expires : Zeitpunkt, zu dem der Authorization Code ung\u00fcltig wird (optional).    access_token :  Eine Zeichenkette, die den Zugriff auf die WebDAV Schnittstelle erlaubt.  code : Zeichenkette, die als Access Token dient.  client_id : Client Identifier des Clients, f\u00fcr den der Access Token ausgegeben wird.  user_id : User ID des ownCloud-Nutzers, der den Client autorisiert hat.  expires : Zeitpunkt, zu dem der Access Token ung\u00fcltig wird (optional).    refresh_token :  Eine Zeichenkette, mit der ein abgelaufener Access Token gegen einen neuen ausgetauscht werden kann.  code : Zeichenkette, die als Refresh Token dient.  client_id : Client Identifier des Clients, f\u00fcr den der Access Token ausgegeben wird.  user_id : User ID des ownCloud-Nutzers, der den Client autorisiert hat.  expires : Zeitpunkt, zu dem der Refresh Token ung\u00fcltig wird (optional).     Folgendes Entity-Relationship-Modell fasst das Datenmodell nochmal grafisch zusammen.  \n   TODO:  ERM einf\u00fcgen.", 
            "title": "Datenmodell"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#mapper-und-entities", 
            "text": "F\u00fcr den Datenbank-Zugriff im PHP-Code ist es in ownCloud m\u00f6glich,  Mapper  und  Entities  zu schreiben. Dadurch werden Tupel in einer Datenbank-Tabelle automatisch in ein Objekt umgewandelt.  Folgendes Codebeispiel zeigt am Beispiel des Entitys  Client , wie eine PHP-Klasse dazu aussehen muss.  ?php\nnamespace OCA\\OAuth2\\Db;\n\nuse OCP\\AppFramework\\Db\\Entity;\n\n/**\n * Class Client\n *\n * @method string getIdentifier()\n * @method void setIdentifier(string $identifier)\n * @method string getSecret()\n * @method void setSecret(string $secret)\n * @method string getRedirectUri()\n * @method void setRedirectUri(string $redirectUri)\n * @method string getName()\n * @method void setName(string $name)\n */\nclass Client extends Entity {\n\n    protected $identifier;\n    protected $secret;\n    protected $redirectUri;\n    protected $name;\n\n    public function __construct() {\n        $this- addType('id', 'int');\n        $this- addType('identifier', 'string');\n        $this- addType('secret', 'string');\n        $this- addType('redirect_uri', 'string');\n        $this- addType('name', 'string');\n    }\n\n}  Wichtig ist, dass die Klasse von  Entity  erbt und sowohl der Klassenname als auch die Attribute mit denen der Tabelle \u00fcbereinstimmen. Pascal bzw. Camel case im PHP-Code wird automatisch zu Snake case f\u00fcr die Datenbank umgewandelt. Getter und Setter werden ebenfalls automatisch generiert. Die PHPDoc Kommentare dienen lediglich dazu, in der Entwicklungsumgebung eine automatische Vervollst\u00e4ndigung zu haben. Die Angabe von  Typen  im Konstruktor dienen dazu, beim Lesen aus der Datenbank die richtige Umwandlung zu erhalten.  Das folgende Codebeispiel zeigt einen Ausschnitt aus dem zur  Client  Entity geh\u00f6renden Mapper.  ?php\nnamespace OCA\\OAuth2\\Db;\n\nuse InvalidArgumentException;\nuse OCP\\AppFramework\\Db\\Entity;\nuse OCP\\IDb;\nuse OCP\\AppFramework\\Db\\Mapper;\n\nclass ClientMapper extends Mapper {\n\n    /**\n     * ClientMapper constructor.\n     *\n     * @param IDb $db Database Connection.\n     */\n    public function __construct(IDb $db) {\n        parent::__construct($db, 'oauth2_clients');\n    }\n\n    /**\n     * Selects a client by its ID.\n     *\n     * @param int $id The client's ID.\n     *\n     * @return Entity The client entity.\n     *\n     * @throws \\OCP\\AppFramework\\Db\\DoesNotExistException if not found.\n     * @throws \\OCP\\AppFramework\\Db\\MultipleObjectsReturnedException if more than one result.\n     */\n    public function find($id) {\n        if (!is_int($id)) {\n            throw new InvalidArgumentException('id must not be null');\n        }\n\n        $sql = 'SELECT * FROM `' . $this- tableName . '` WHERE `id` = ?';\n        return $this- findEntity($sql, array($id), null, null);\n    }\n\n    /**\n     * Selects clients by the given user ID.\n     *\n     * @param string $userId The user ID.\n     *\n     * @return array The client entities.\n     */\n    public function findByUser($userId) {\n        if (!is_string($userId)) {\n            throw new InvalidArgumentException('userId must not be null');\n        }\n\n        $sql = 'SELECT * FROM `' . $this- tableName . '` '\n            . 'WHERE `id` IN ( '\n                . 'SELECT `client_id` FROM `oc_oauth2_authorization_codes` WHERE `user_id` = ? '\n                . 'UNION '\n                . 'SELECT `client_id` FROM `oc_oauth2_access_tokens` WHERE `user_id` = ? '\n            .')';\n        return $this- findEntities($sql, array($userId, $userId), null, null);\n    }\n\n}  Beim Mapper ist es wichtig, dass die Klasse von  Mapper  erbt und eine Entity-Klasse zu ihm existiert. Dazu wird das Wort vor \u201eMapper\u201c als Entityname verwendet. Im Konstruktur wird der Tabellenname angegeben. Die beiden Funktionen  find  und  findByUser  demonstrieren  SELECT -Anweisungen. Dazu wird die SQL-Anweisungen zusammen mit ben\u00f6tigten Parametern an  findEntity  bzw.  findEntities  \u00fcbergeben, abh\u00e4ngig davon, ob mehrere Entities im Ergebnis enthalten sein sollten. Funktionen zum l\u00f6schen, einf\u00fcgen und updaten werden von der Oberklasse bereits implementiert und mussten nicht angepasst werden.", 
            "title": "Mapper und Entities"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#schnittstellen-und-routes", 
            "text": "Um in einer ownCloud App Schnittstellen anzubieten, m\u00fcssen  Routes  registriert werden. Zur Umsetzung der erw\u00e4hnten User Stories waren folgende Routes notwendig:     Methode  Endpunkt  Beschreibung      GET  authorize  Endpunkt, zu dem der Client den Nutzer weiterleitet, um die Autorisierung anzufragen (Authorization URL).    POST  authorize  Endpunkt, der aufgerufen wird, sobald der Nutzer den Client autorisiert hat.    POST  api/v1/token  Endpunkt, an dem ein Access Token angefordert wird (Access Token URL).    POST  clients  Endpunkt, durch den der Administrator einen Client hinzuf\u00fcgen kann.    POST  clients/{id}/delete  Endpunkt, durch den der Administrator den Client mit der ID  id  l\u00f6schen kann.    POST  clients/{id}/revoke  Endpunkt, durch den der Nutzer die Autorisierung des Clients mit der ID  id  widerrufen kann.     Registriert werden die Routes in der Datei  routes.php , indem ein Array mit den Routes zur\u00fcckgegeben wird. Nachfolgendes Codebeispiel zeigt einige der obigen Routes:  ?php\nreturn [\n    'routes' =  [\n        ['name' =  'page#authorize', 'url' =  '/authorize', 'verb' =  'GET'],\n        ['name' =  'o_auth_api#generate_token', 'url' =  '/api/v1/token', 'verb' =  'POST'],\n        ['name' =  'settings#deleteClient', 'url' =  '/clients/{id}/delete', 'verb' =  'POST']\n    ]\n];  Durch  name  wird f\u00fcr jede Route der Name des dazugeh\u00f6rigen  Controllers  sowie die aufzurufende Funktion angegeben. Vor dem  # -Zeichen steht der Controllername in Snake case und hinter dem  # -Zeichen steht der Funktionsname (ebenfalls in Snake case). Mithilfe von  url  wird der Endpunkt festgelegt und  verb  definiert die HTTP-Methode.", 
            "title": "Schnittstellen und Routes"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#controller", 
            "text": "Wenn an einem Endpunkt eine HTTP-Anfrage ankommt, so wird der in den Routes definierte  Controller  aufgerufen. Wichtig ist hierbei, dass von der Klasse  Controller  oder einer Unterklasse wie  ApiController  geerbt wird.  F\u00fcr den Controller notwendige Parameter wie  Mapper  k\u00f6nnen im Konstruktor als Parameter angegeben und so durch  Dependency Injection  erhalten werden. Nachfolgendes Codebeispiel zeigt den Konstruktor vom  PageController .  /**\n * PageController constructor.\n * \n * @param string $AppName The name of the app.\n * @param IRequest $request The request.\n * @param ClientMapper $clientMapper The client mapper.\n * @param AuthorizationCodeMapper $authorizationCodeMapper The authorization code mapper.\n * @param string $UserId The user ID.\n */\npublic function __construct($AppName, IRequest $request, ClientMapper $clientMapper,\n    AuthorizationCodeMapper $authorizationCodeMapper, $UserId) {\n    parent::__construct($AppName, $request);\n\n    $this- clientMapper = $clientMapper;\n    $this- authorizationCodeMapper = $authorizationCodeMapper;\n    $this- userId = $UserId;\n}  Die hier notwendigen Parameter sind der Name der App, eine  ClientMapper  Instanz, eine  AuthorizationCodeMapper  Instanz und die ID des Nutzers, um bei der Autorisierung des Clients speichern zu k\u00f6nnen, welcher Nutzers dies veranlasst hat.  Die mit den Routes verkn\u00fcpften Funktionen k\u00f6nnen zur Zugriffskontrolle mit  PHPDoc Annotationen  versehen werden. Folgendes Codebeispiel zeigt die Annotationen f\u00fcr die Funktion  generateToken  im  OAuthApiController .  /**\n * Implements the OAuth 2.0 Access Token Response.\n *\n * @param string $code The authorization code.\n * @return JSONResponse The Access Token or an empty JSON Object.\n *\n * @NoAdminRequired\n * @NoCSRFRequired\n * @PublicPage\n * @CORS\n */\npublic function generateToken($code) { }  Die Annotationen haben dabei folgende Bedeutungen.     Annotation  Bedeutung      @NoAdminRequired  Aufruf auch von normalen Nutzern m\u00f6glich.    @NoCSRFRequired  Zeigt an, dass die \u00dcberpr\u00fcfung des CSRF Tokens nicht gewollt ist.    @PublicPage  Zugriff auch ohne Login m\u00f6glich.    @CORS  Aufruf der API durch andere Web Applikationen von au\u00dfen m\u00f6glich.     In den Controller-Funktionen k\u00f6nnen verschiedene Inhalte zur\u00fcckgegeben werden. Hier genutzte R\u00fcckgabetypen sind in der folgenden Tabelle zusammengefasst.     Typ  Beschreibung      TemplateResponse  Zur R\u00fcckgabe eines Templates, das dem Nutzer angezeigt werden soll.    RedirectResponse  Zur Weiterleitung des Nutzers an eine andere URL.    JSONResponse  Zur R\u00fcckgabe eines JSON Strings.     Ein Beispiel f\u00fcr die R\u00fcckgabetypen  TemplateResponse  und  RedirectResponse  gibt die Funktion  authorize  im  PageController , die im folgenden Codebeispiel zu sehen ist.  /**\n * Shows a view for the user to authorize a client.\n *\n * @param string $response_type The expected response type.\n * @param string $client_id The client identifier.\n * @param string $redirect_uri The redirect URI.\n * @param string $state The state.\n * @param string $scope The scope.\n *\n * @return TemplateResponse|RedirectResponse The authorize view or a\n * redirection to the ownCloud main page.\n *\n * @NoAdminRequired\n * @NoCSRFRequired\n */\npublic function authorize($response_type, $client_id, $redirect_uri, $state = null, $scope = null) {\n    if (!is_string($response_type) || !is_string($client_id)\n        || !is_string($redirect_uri) || (isset($state)   !is_string($state))\n        || (isset($scope)   !is_string($scope))) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n\n    try {\n        /** @var Client $client */\n        $client = $this- clientMapper- findByIdentifier($client_id);\n    } catch (DoesNotExistException $exception) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n\n    if (strcmp($client- getRedirectUri(), urldecode($redirect_uri)) !== 0) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n    if (strcmp($response_type, 'code') !== 0) {\n        return new RedirectResponse(OC_Util::getDefaultPageUrl());\n    }\n\n    return new TemplateResponse('oauth2', 'authorize', ['client_name' =  $client- getName()]);\n}  Hier werden zun\u00e4chst die Parameter auf G\u00fcltigkeit \u00fcberpr\u00fcft. Sollten die Parameter nicht g\u00fcltig sein (beispielsweise deshalb, weil der angegebene Client nicht existiert oder dessen Redirect URI falsch angegeben wurde) wird mit einem  RedirectResponse  auf die ownCloud Startseite umgeleitet. Andernfalls wird ein  TemplateResponse  f\u00fcr das Template  authorize  zur\u00fcckgegeben. F\u00fcr das Rendern des Templates k\u00f6nnen Parameter wie hier  client_name  f\u00fcr den Namen des Clients \u00fcbergeben werden.  Der R\u00fcckgabetyp  JSONResponse  wird f\u00fcr die R\u00fcckgabe des Access Tokens in der Funktion  generateToken  im  OAuthApiController  genutzt, wie nachfolgendes Codebeispiel zeigt. Zudem ist das Zusammenspiel mit Entities und Mappern zu sehen.  /**\n * Implements the OAuth 2.0 Access Token Response.\n *\n * @param string $code The authorization code.\n * @return JSONResponse The Access Token or an empty JSON Object.\n *\n * @NoAdminRequired\n * @NoCSRFRequired\n * @PublicPage\n * @CORS\n */\npublic function generateToken($code) {\n    if (is_null($code) || is_null($_SERVER['PHP_AUTH_USER'])\n        || is_null($_SERVER['PHP_AUTH_PW'])) {\n        return new JSONResponse(['message' =  'Missing credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    try {\n        /** @var Client $client */\n        $client = $this- clientMapper- findByIdentifier($_SERVER['PHP_AUTH_USER']);\n    } catch (DoesNotExistException $exception) {\n        return new JSONResponse(['message' =  'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    if (strcmp($client- getSecret(), $_SERVER['PHP_AUTH_PW']) !== 0) {\n        return new JSONResponse(['message' =  'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    try {\n        /** @var AuthorizationCode $authorizationCode */\n        $authorizationCode = $this- authorizationCodeMapper- findByCode($code);\n    } catch (DoesNotExistException $exception) {\n        return new JSONResponse(['message' =  'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    if (strcmp($authorizationCode- getClientId(), $client- getId()) !== 0) {\n        return new JSONResponse(['message' =  'Unknown credentials.'], Http::STATUS_BAD_REQUEST);\n    }\n\n    $token = Utilities::generateRandom();\n    $userId = $authorizationCode- getUserId();\n    $accessToken = new AccessToken();\n    $accessToken- setToken($token);\n    $accessToken- setClientId($authorizationCode- getClientId());\n    $accessToken- setUserId($userId);\n    $this- accessTokenMapper- insert($accessToken);\n\n    $this- authorizationCodeMapper- delete($authorizationCode);\n\n    return new JSONResponse(\n        [\n            'access_token' =  $token,\n            'token_type' =  'Bearer',\n            'user_id' =  $userId\n        ]\n    );\n}  Nach erfolgreicher \u00dcberpr\u00fcfung des Authorization Codes und der Angaben zur Client Authentication im Authorization Header wird eine neuer Access Token erstellt und in der Datenbank gespeichert. Der verwendete Authorization Code wird zudem gel\u00f6scht. Im JSON Response wird dann der Access Token, der Token Typ und die ID des Nutzers zur\u00fcckgegeben. Nachfolgend ist ein Beispiel dazu angegeben.  {\n     access_token  :  1vtnuo1NkIsbndAjVnhl7y0wJha59JyaAiFIVQDvcBY2uvKmj5EPBEhss0pauzdQ ,\n     token_type  :  Bearer ,\n     user_id  :  admin \n}  F\u00fcr die Token-Generierung wurde die Hilfsklasse  Utilities  mit der statischen Funktion  generateRandom  geschrieben, die mithilfe einer ownCloud-internen Funktion 64-stellige Zeichenketten erzeugt. Folgendes Codebeispiel zeigt diese Klasse.  ?php\nnamespace OCA\\OAuth2;\n\nclass Utilities {\n\n    /**\n     * Generates a random string with 64 characters.\n     *\n     * @return string The random string.\n     */\n    public static function generateRandom() {\n        return \\OC::$server- getSecureRandom()- generate(64,\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');\n    }\n\n}  Zusammenfassend werden im folgenden UML-Klassendiagramm die Controller mit ihren Beziehungen zu den Entities und Mappern dargestellt.  \n   TODO:  Klassendiagramm einf\u00fcgen.", 
            "title": "Controller"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#templates", 
            "text": "", 
            "title": "Templates"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#protokollablauf", 
            "text": "", 
            "title": "Protokollablauf"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#tests", 
            "text": "", 
            "title": "Tests"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#continuous-integration", 
            "text": "", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#anpassung-der-dav-app", 
            "text": "", 
            "title": "Anpassung der dav App"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#authentication-backend", 
            "text": "", 
            "title": "Authentication Backend"
        }, 
        {
            "location": "/owncloud/technische-umsetzung/#tests_1", 
            "text": "", 
            "title": "Tests"
        }, 
        {
            "location": "/owncloud/benutzung/", 
            "text": "Benutzung\n\n\nInstallation\n\n\n\n\nHinweis:\n Zur Zeit liegen die Anpassungen der \ndav\n App als \nPull Request\n vor. Falls die \u00c4nderungen angenommen werden, sind sie in einer der n\u00e4chsten ownCloud Versionen enthalten.\n\n\n\n\nDa die \u00c4nderungen zum aktuellen Zeitpunkt noch nicht in den Core aufgenommen wurden, muss der \ndav-oauth\n-Branch des \ngeforkten Repositorys\n geklont werden:\n\n\n$ git clone -b dav-oauth https://github.com/pssl16/core\n\n\n\n\nDanach m\u00fcssen die Dependencies installiert werden. Dazu gen\u00fcgt es, im Verzeichnis des Repositorys folgenden Befehl auszuf\u00fchren:\n\n\n$ make\n\n\n\n\nDie restlichen Installationsschritte unterscheiden sich nicht von denen im \nownCloud Handbuch\n.\n\n\nClientregistrierung\n\n\nAuthorization Code Flow\n\n\nDie nachfolgende Abbildung stellt den durch die \noauth2\n App implementierten \nOAuth 2.0 Authorization Code Flow\n dar.\n\n\n\n\n\n  \nTODO:\n Beschreibung der Schritte einf\u00fcgen.\n\n\n\n\nAngepasste WebDAV Schnittstelle", 
            "title": "Benutzung"
        }, 
        {
            "location": "/owncloud/benutzung/#benutzung", 
            "text": "", 
            "title": "Benutzung"
        }, 
        {
            "location": "/owncloud/benutzung/#installation", 
            "text": "Hinweis:  Zur Zeit liegen die Anpassungen der  dav  App als  Pull Request  vor. Falls die \u00c4nderungen angenommen werden, sind sie in einer der n\u00e4chsten ownCloud Versionen enthalten.   Da die \u00c4nderungen zum aktuellen Zeitpunkt noch nicht in den Core aufgenommen wurden, muss der  dav-oauth -Branch des  geforkten Repositorys  geklont werden:  $ git clone -b dav-oauth https://github.com/pssl16/core  Danach m\u00fcssen die Dependencies installiert werden. Dazu gen\u00fcgt es, im Verzeichnis des Repositorys folgenden Befehl auszuf\u00fchren:  $ make  Die restlichen Installationsschritte unterscheiden sich nicht von denen im  ownCloud Handbuch .", 
            "title": "Installation"
        }, 
        {
            "location": "/owncloud/benutzung/#clientregistrierung", 
            "text": "", 
            "title": "Clientregistrierung"
        }, 
        {
            "location": "/owncloud/benutzung/#authorization-code-flow", 
            "text": "Die nachfolgende Abbildung stellt den durch die  oauth2  App implementierten  OAuth 2.0 Authorization Code Flow  dar.   \n   TODO:  Beschreibung der Schritte einf\u00fcgen.", 
            "title": "Authorization Code Flow"
        }, 
        {
            "location": "/owncloud/benutzung/#angepasste-webdav-schnittstelle", 
            "text": "", 
            "title": "Angepasste WebDAV Schnittstelle"
        }, 
        {
            "location": "/moodle/technische-umsetzung/", 
            "text": "Technische Umsetzung", 
            "title": "Technische Umsetzung"
        }, 
        {
            "location": "/moodle/technische-umsetzung/#technische-umsetzung", 
            "text": "", 
            "title": "Technische Umsetzung"
        }, 
        {
            "location": "/moodle/benutzung/", 
            "text": "Benutzung\n\n\nInstallation", 
            "title": "Benutzung"
        }, 
        {
            "location": "/moodle/benutzung/#benutzung", 
            "text": "", 
            "title": "Benutzung"
        }, 
        {
            "location": "/moodle/benutzung/#installation", 
            "text": "", 
            "title": "Installation"
        }
    ]
}